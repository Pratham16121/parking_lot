As per the problem statement, I was been assigned with a task to implement a parking lot management system. I decided to implementthe same with Ruby on Rails Framework, because it is an integrated, automated testing system whcih allows the developer to test any function of the application at the time of its development, thus ensuring that it works correctly and can continue with the next step in the process.

I have chosen PostgreSQL as the database because it is known to be faster for handeling massive datasets, complicated queries, and rad write operations.


WORKING OF THE PROJECT
The Parking Lot Management System follows a specific approach to efficiently manage parking lots. Here's an overview of the key steps involved:

Setup: During the initial setup at a parking location, a finite number of slots are created, taking input arguments from user. Each parking slot is assigned a unique name and the distance between each row of parking is considered as 4 units, while the distance between each slot is 1 unit.

Car Registration: When a new car arrives, it is registered in the system by providing its registration number and color. This information is stored for future reference.

Ticket Generation and Parking Lot Allocation: When a registered car enters the parking lot, a ticket is generated. The ticket assigns the car to a slot that is closest to the entry point.
When a ticket is generated, the value of is_deleted attribute of the ticket is default set to false and the value of is_empty of the slot is set to false till the time the car stays in the parking lot.
Once the car leaves the parking lot, the value of is_deleted of the ticket is set to true as the ticket no longer holds any value, but the history is saved in the database and the value of is_empty of the slot is again set to true so that a new car can aquire the slot.

The system continuously monitors the occupancy of parking slots and keeps track of available and occupied slots. It provides real-time information to the parking lot staff to manage the parking space effectively.


DESIGN AND IMPLIMENTATION OF THE PROJECT
The project holds three models, namely – Ticket, Car and Slot. 
A car can have many tickets within a span of time, but a ticket can only be assigned to a single car, which describes it’s one-to-many relationship with Ticket model.
A slot can hold one ticket at a time, but can be assigned to multiple tickets within a span of time. Hence, Slot holds one-to-many relationship to Ticket.
Please find attached the Database Schema Design in the zip file.
The system has three controllers - cars_controller, tickets_controller and slots_controller which contains operations defined by various API’s such as create, update and index. The API’s vary according to the requriements for each controller. 

Also, Service objects have been used to separate buisness logic from controllers and models, enabling the models to separate data layers and the controllers entry point of the API in order to re-use and maintain the code in a clean manner.

Furthermore, I have used rake tasks for creating custom task to automate the creation and allocation of parking-slot to cars depending upon the shortest distance from entry point.

For the queries which were given in the problem statement, 
- Registration numbers of all cars of a particular Color.
- Ticket number in which a car with a given registration number is placed.
- Ticket numbers of all tickets where a car of a particular color is placed
When we run the application on localhost, you can find the "All Tickets" button which has the search option capable to execute all the above queries.
The search feature is highly customizable as it can search with nearly all the parameters.


TESTING OF THE PROJECT
The testing is done with Rspec gem in Ruby to test the behavior of models and services for positive as well as negative scenarios.|
Model test case have been written to verify the relations and validations for all the tables at model level.
Acceptance test cases have been written to test the API’s in every possible scneraio.


INTERNATIONALIZATION
I18n has been used which is a powerful internationalization tool to support the application to different langauge culture and also to store the messages to be shown to user in a single file en.yml, and make the code look neat and clean.