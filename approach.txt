I have been tasked with developing a parking lot management system, and I have chosen to implement it using the Ruby on Rails framework. This choice was made because Rails provides an integrated and automated testing system that allows developers to test functions during development, ensuring correctness before moving forward. Additionally, PostgreSQL has been selected as the database system due to its speed and ability to handle large datasets and complex queries efficiently.

The Parking Lot Management System operates through several key steps:

Setup: During the initial setup, a fixed number of parking slots are created based on user input. Each slot is given a unique name, and the spacing between rows and slots is standardized.

Car Registration: When a new car arrives, its registration number and color are registered in the system for future reference.

Ticket Generation and Parking Lot Allocation: As a registered car enters the parking lot, a ticket is generated, and the car is assigned to the nearest available slot. The ticket initially has the "is_deleted" attribute set to false, and the slot's "is_empty" status is set to false as long as the car occupies the slot. When the car leaves, the "is_deleted" attribute of the ticket is set to true, while the slot's "is_empty" status is reset to true.

Real-time Monitoring: The system continually monitors parking slot occupancy, providing real-time information to the parking staff to manage the parking space effectively.

The project consists of three main models: Ticket, Car, and Slot. A car can have multiple tickets over time, while a ticket can be assigned to only one car, establishing a one-to-many relationship. Similarly, a slot can hold one ticket at a time but can be assigned to multiple tickets, resulting in a one-to-many relationship with the Ticket model.

The system employs three controllers: cars_controller, tickets_controller, and slots_controller, each with various API operations such as create, update, and index tailored to their specific requirements. Service objects have been employed to separate business logic from controllers and models, enhancing code reusability and maintainability.

Rake tasks are utilized to create custom tasks for automating the creation and allocation of parking slots to cars based on the shortest distance from the entry point.

Regarding the queries mentioned in the problem statement, the system provides functionality to retrieve:

Registration numbers of all cars of a specific color.
Ticket number in which a car with a given registration number is placed.
Ticket numbers of all tickets where a car of a particular color is placed.
These queries can be executed through the "All Tickets" button with a search option when running the application on localhost. The search feature is highly versatile, allowing for searches using various parameters.

For testing, the Rspec gem in Ruby is used to validate the behavior of models and services in both positive and negative scenarios. Model test cases verify relationships and validations, while acceptance test cases assess the APIs under various conditions.

To support internationalization, I18n is employed, enabling the application to adapt to different language cultures and store user messages in a single "en.yml" file for cleaner and more organized code.